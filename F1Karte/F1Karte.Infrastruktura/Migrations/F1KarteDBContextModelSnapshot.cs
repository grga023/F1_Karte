// <auto-generated />
using System;
using F1Karte.Infrastruktura.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace F1Karte.Infrastruktura.Migrations
{
    [DbContext(typeof(F1KarteDBContext))]
    partial class F1KarteDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("F1Karte.Domain.Modeli.Karta", b =>
                {
                    b.Property<int>("ID_Karte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Karte"), 1L, 1);

                    b.Property<int>("BrDana")
                        .HasColumnType("int");

                    b.Property<double>("CenaKarte")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Drzava")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivStaze")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tribina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Karte");

                    b.ToTable("Karte");
                });
#pragma warning restore 612, 618
        }
    }
}
